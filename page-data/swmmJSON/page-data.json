{"componentChunkName":"component---src-templates-docs-js","path":"/swmmJSON","result":{"data":{"site":{"siteMetadata":{"title":"SWMM-JS docs | swmm-js","docsLocation":"https://github.com/ikegdivs/swmm-js"}},"mdx":{"fields":{"id":"d807c3a9-a0b2-5762-a4e1-d739f98d5b74","title":"swmmJSON","slug":"/swmmJSON"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are currently two specifications for EPA-SWMM (Environmental Protection Agency-Stormwater Management Model) files in JSON. The first is the Interface-Friendly Format (IF), and the second is the User-Friendly Format (UF). The UF is best for debugging and hand-writing the inp file. The IF is used by a swmm-js program when processing an input file. Both files should be capable of transpilation given a proper version number. In all cases where a UF json is different from an IF json, a string is used in place of an integer or floating point number.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"{\\n    \\\"Title\\\": [ str, ... ],\\n    \\\"OPTIONS\\\": {\\n        \\\"FLOW_UNITS\\\"            : int,      // FlowUnits        // FlowUnitWords[FlowUnits]\\n        \\\"INFILTRATION\\\"          : int,      // InfilModel       // InfilModelWords[InfilModel]\\n        \\\"FLOW_ROUTING\\\"          : int,      // RouteModel       // RouteModelWords[RouteModel]\\n        \\\"START_DATE\\\"            : float,    // StartDate        // StartDate\\n        \\\"START_TIME\\\"            : float,    // StartTime        // StartTime\\n        \\\"END_DATE\\\"              : float,    // EndDate          // EndDate\\n        \\\"END_TIME\\\"              : float,    // EndTime          // EndTime\\n        \\\"REPORT_START_DATE\\\"     : float,    // ReportStartDate  // ReportStartDate\\n        \\\"REPORT_START_TIME\\\"     : float,    // ReportStartTime  // ReportStartTime\\n        \\\"SWEEP_START\\\"           : int,      // SweepStart       // SweepStart\\n        \\\"SWEEP_END\\\"             : int,      // SweepEnd         // SweepStart\\n        \\\"DRY_DAYS\\\"              : float,    // StartDryDays     // StartDryDays\\n        \\\"WET_STEP\\\"              : int,      // WetStep          // WetStep\\n        \\\"DRY_STEP\\\"              : int,      // DryStep          // DryStep\\n        \\\"REPORT_STEP\\\"           : int,      // ReportStep       // ReportStep\\n        \\\"RULE_STEP\\\"             : int,      // RuleStep         // RuleStep\\n        \\\"INERTIAL_DAMPING\\\"      : int,      // InertDamping     // InertDampingWords[InertDamping]\\n        \\\"ALLOW_PONDING\\\"         : int,      // AllowPonding     // NoYesWords[AllowPonding]\\n        \\\"SLOPE_WEIGHTING\\\"       : int,      // SlopeWeighting   // NoYesWords[SlopeWeighting]\\n        \\\"SKIP_STEADY_STATE\\\"     : int,      // SkipSteadyState  // NoYesWords[SlopeWeighting]\\n        \\\"IGNORE_RAINFALL\\\"       : int,      // IgnoreRainfall   // NoYesWords[IgnoreRainfall]\\n        \\\"IGNORE_SNOWMELT\\\"       : int,      // IgnoreSnowmelt   // NoYesWords[IgnoreSnowmelt]\\n        \\\"IGNORE_GROUNDWATER\\\"    : int,      // IgnoreGwater     // NoYesWords[IgnoreGwater]\\n        \\\"IGNORE_ROUTING\\\"        : int,      // IgnoreRouting    // NoYesWords[IgnoreRouting]\\n        \\\"IGNORE_QUALITY\\\"        : int,      // IgnoreQuality    // NoYesWords[IgnoreQuality]\\n        \\\"IGNORE_RDII\\\"           : int,      // IgnoreRDII       // NoYesWords[IgnoreRDII]\\n        \\\"NORMAL_FLOW_LIMITED\\\"   : int,      // NormalFlowLtd    // NormalFlowWords[IgnoreRDII]\\n        \\\"FORCE_MAIN_EQUATION\\\"   : int,      // ForceMainEqn     // ForceMainEqnWords[ForceMainEqn]\\n        \\\"LINK_OFFSETS\\\"          : int,      // LinkOffsets      // LinkOffsetWords[LinkOffsets]\\n        \\\"COMPATIBILITY\\\"         : int,      // Compatibility    // Compatibility\\n        \\\"ROUTING_STEP\\\"          : int,      // RouteStep        // RouteStep\\n        \\\"LENGTHENING_STEP\\\"      : float,    // LengtheningStep  // LengtheningStep\\n        \\\"MINIMUM_STEP\\\"          : float,    // MinRouteStep     // MinRouteStep\\n        \\\"THREADS\\\"               : int,      // NumThreads       // NumThreads\\n        \\\"VARIABLE_STEP\\\"         : float,    // CourantFactor    // CourantFactor\\n        \\\"MIN_SURFAREA\\\"          : float,    // MinSurfArea      // MinSurfArea\\n        \\\"MIN_SLOPE\\\"             : float,    // MinSlope         // MinSlope      // MinSlope*100 in dialogs\\n        \\\"MAX_TRIALS\\\"            : int,      // MaxTrials        // MaxTrials      \\n        \\\"HEAD_TOLERANCE\\\"        : float,    // HeadTol          // HeadTol  \\n        \\\"SYS_FLOW_TOL\\\"          : float,    // SysFlowTol       // SysFlowTol  // SysFlowTol*100 in dialogs\\n        \\\"LAT_FLOW_TOL\\\"          : float,    // LatFlowTol       // LatFlowTol  // LatFlowTol*100 in dialogs\\n        \\\"SURCHARGE_METHOD\\\"      : int,      // SurchargeMethod  // SurchargeMethod\\n        \\\"TEMPDIR\\\"               : string    // TempDir          // TempDir\\n    },\\n    \\\"Pattern\\\": [\\n        {\\n            \\\"ID\\\"                : string,   // Pattern[i].ID\\n            \\\"count\\\"             : int,      // Pattern[i].count\\n            \\\"factor\\\"            : [ \\n                float, ...                  // Pattern[i].factor[ii]\\n            ],\\n            \\\"type\\\"              : int       // Pattern[i].type\\n        }, ... xNobjects[TIMEPATTERN]\\n    ],\\n    \\\"Tseries\\\": [\\n        {\\n            \\\"ID\\\"                : string,   // Tseries[i].ID\\n            \\\"curveType\\\"         : int,      // Tseries[i].curveType\\n            \\\"refersTo\\\"          : int,      // Tseries[i].refersTo\\n            \\\"dxMin\\\"             : float,    // Tseries[i].dxMin\\n            \\\"lastDate\\\"          : float,    // Tseries[i].lastDate\\n            \\\"x1\\\"                : float,    // Tseries[i].x1\\n            \\\"x2\\\"                : float,    // Tseries[i].x2\\n            \\\"y1\\\"                : float,    // Tseries[i].y1\\n            \\\"y2\\\"                : float,    // Tseries[i].y2\\n            \\\"file\\\"              : {\\n                \\\"name\\\"          : string,   // Tseries[i].file.name\\n                \\\"mode\\\"          : int       // Tseries[i].file.mode\\n            },\\n            \\\"Table\\\"             : [\\n                {\\n                    \\\"x\\\"         : float,    // Tseries[i].Entry->x\\n                    \\\"y\\\"         : float     // Tseries[i].Entry->y\\n                }, ...\\n            ]\\n        }, ... xNobjects[TSERIES]\\n    ],\\n    \\\"Evap\\\": {\\n        \\\"dryOnly\\\"               : int,      // Evap.dryOnly\\n        \\\"monthlyEvap\\\"           : [ \\n                                    float, x12  // Evap.monthlyEvap[i]\\n        ],\\n        \\\"panCoeff\\\"              : [ \\n                                    float, x12  // Evap.panCoeff[i]\\n        ],\\n        \\\"recoveryFactor\\\"        : float,    // Evap.recoveryFactor\\n        \\\"recoveryPattern\\\"       : float,    // Evap.recoveryPattern\\n        \\\"tSeries\\\"               : int,      // Evap.tSeries\\n        \\\"type\\\"                  : int,      // Evap.type\\n        \\\"rate\\\"                  : int       // Evap.rate\\n    },\\n    \\\"Adjust\\\": {\\n        \\\"rainFactor\\\"            : float,    // Adjust.rainFactor\\n        \\\"hydconFactor\\\"          : float,    // Adjust.hydconFactor\\n        \\\"temp\\\"                  : [ \\n                                    float, x12  // Adjust.temp[i]\\n        ],\\n        \\\"evap\\\"                  : [ \\n                                    float, x12  // Adjust.evap[i]\\n        ],\\n        \\\"rain\\\"                  : [ \\n                                    float, x12  // Adjust.rain[i]\\n        ],\\n        \\\"hydcon\\\"                : [ \\n                                    float, x12  // Adjust.hydcon[i]\\n        ]\\n    },\\n    \\\"Gage\\\": [\\n        {\\n            \\\"ID\\\"                : string,       // Gage.ID\\n            \\\"dataSource\\\"        : int,          // Gage.dataSource\\n            \\\"tSeries\\\"           : int,          // Gage.tSeries\\n            \\\"fname\\\"             : string,       // Gage.fname\\n            \\\"staID\\\"             : string,       // Gage.staID\\n            \\\"startFileDate\\\"     : float,        // Gage.startFileDate\\n            \\\"endFileDate\\\"       : float,        // Gage.endFileDate\\n            \\\"rainType\\\"          : int,          // Gage.rainType\\n            \\\"rainInterval\\\"      : int,          // Gage.rainInterval\\n            \\\"rainUnits\\\"         : int,          // Gage.rainUnits\\n            \\\"snowFactor\\\"        : float,        // Gage.snowFactor\\n            \\\"unitsFactor\\\"       : float,        // Gage.unitsFactor\\n            \\\"coGage\\\"            : int           // Gage.coGage\\n        }, ... xNobjects[GAGE]\\n    ],\\n    \\\"Temp\\\": {\\n        \\\"dataSource\\\"            : int,          // Temp.dataSource\\n        \\\"tSeries\\\"               : int,          // Temp.tSeries\\n        \\\"fileStartDate\\\"         : float,        // Temp.fileStartDate\\n        \\\"anglat\\\"                : float,        // Temp.anglat\\n        \\\"dtlong\\\"                : float         // Temp.dtlong\\n    },\\n    \\\"Fclimate\\\": {\\n        \\\"name\\\"                  : string,       // Fclimate.name\\n        \\\"mode\\\"                  : int,          // Fclimate.mode\\n        \\\"state\\\"                 : int           // Fclimate.state\\n    },\\n    \\\"Wind\\\": {\\n        \\\"type\\\"                  : int,          // Wind.type\\n        \\\"aws\\\"                   : [ \\n                                    float, x12  // Adjust.temp[i]\\n        ]\\n    },\\n    \\\"Snow\\\": {\\n        \\\"snotmp\\\"                : float,        // Snow.snotmp\\n        \\\"tipm\\\"                  : float,        // Snow.tipm\\n        \\\"rnm\\\"                   : float,        // Snow.rnm\\n        \\\"adc\\\"                   : [ \\n                                    [\\n                                    float, x10  // Snow.adc[i][ii]\\n                                ], x2\\n        ]\\n    },\\n    \\\"Subcatch\\\": [\\n        {\\n            \\\"ID\\\"                    : string,       // Subcatch[i].ID\\n            \\\"rptFlag\\\"               : int,          // Subcatch[i].rptFlag\\n            \\\"gage\\\"                  : int,          // Subcatch[i].gage\\n            \\\"outNode\\\"               : int,          // Subcatch[i].outNode\\n            \\\"outSubcatch\\\"           : int,          // Subcatch[i].outSubcatch\\n            \\\"infilModel\\\"            : int,          // Subcatch[i].infilModel\\n            \\\"infil\\\"                 : int,          // Subcatch[i].infil\\n            \\\"subArea\\\"               : [\\n                    {\\n                        \\\"routeTo\\\"   : int,          // Subcatch[i].subArea[j].routeTo\\n                        \\\"fOutlet\\\"   : float,        // Subcatch[i].subArea[j].fOutlet\\n                        \\\"N\\\"         : float,        // Subcatch[i].subArea[j].N\\n                        \\\"fArea\\\"     : float,        // Subcatch[i].subArea[j].fArea\\n                        \\\"dStore\\\"    : float         // Subcatch[i].subArea[j].dStore\\n                }, ...\\n            ],\\n            \\\"width\\\"                 : float,        // Subcatch[i].width\\n            \\\"area\\\"                  : float,        // Subcatch[i].area\\n            \\\"fracImperv\\\"            : float,        // Subcatch[i].fracImperv\\n            \\\"slope\\\"                 : float,        // Subcatch[i].slope\\n            \\\"curbLength\\\"            : float,        // Subcatch[i].curbLength\\n            \\\"initBuildup\\\"           : [ \\n                                        float, xNobjects[POLLUT]  // Subcatch[i].initBuildup[j]\\n            ],\\n            \\\"landFactor\\\"            : [\\n                {\\n                    \\\"fraction\\\"      : float,        // Subcatch[i].landFactor[j].fraction\\n                    \\\"buildup\\\"       : [ \\n                                        float, xNobjects[POLLUT]  // Subcatch[i].landFactor[j].buildup[k]\\n                    ],\\n                    \\\"lastSwept\\\"      : float        // Subcatch[i].landFactor[j].lastSwept\\n                }, ... xNobjects[LANDUSE]\\n            ], \\n            \\\"groundwater\\\"           : null | {\\n                \\\"aquifer\\\"           : int,          // Subcatch[i].groundwater->aquifer\\n                \\\"node\\\"              : int,          // Subcatch[i].groundwater->node\\n                \\\"surfElev\\\"          : float,        // Subcatch[i].groundwater->surfElev\\n                \\\"a1\\\"                : float,        // Subcatch[i].groundwater->a1\\n                \\\"a2\\\"                : float,        // Subcatch[i].groundwater->a2\\n                \\\"a3\\\"                : float,        // Subcatch[i].groundwater->a3\\n                \\\"b1\\\"                : float,        // Subcatch[i].groundwater->b1\\n                \\\"b2\\\"                : float,        // Subcatch[i].groundwater->b2\\n                \\\"fixedDepth\\\"        : float,        // Subcatch[i].groundwater->fixedDepth\\n                \\\"nodeElev\\\"          : float,        // Subcatch[i].groundwater->nodeElev\\n                \\\"bottomElev\\\"        : float,        // Subcatch[i].groundwater->bottomElev\\n                \\\"waterTableElev\\\"    : float,        // Subcatch[i].groundwater->waterTableElev\\n                \\\"upperMoisture\\\"     : float         // Subcatch[i].groundwater->upperMoisture\\n            }, \\n            \\\"gwLatFlowExpr\\\"         : [ \\n                {\\n                    \\\"opcode\\\"        : int,          // Subcatch[i].gwLatFlowExpr->opcode\\n                    \\\"ivar\\\"          : int,          // Subcatch[i].gwLatFlowExpr->ivar\\n                    \\\"fvalue\\\"        : float         // Subcatch[i].gwLatFlowExpr->fvalue\\n                }, ...\\n            ],\\n            \\\"gwDeepFlowExpr\\\"        : [ \\n                {\\n                    \\\"opcode\\\"        : int,          // Subcatch[i].gwLatFlowExpr->opcode\\n                    \\\"ivar\\\"          : int,          // Subcatch[i].gwLatFlowExpr->ivar\\n                    \\\"fvalue\\\"        : float         // Subcatch[i].gwLatFlowExpr->fvalue\\n                }, ...\\n            ], \\n            \\\"snowpack\\\"              : null | {\\n                \\\"snowmeltIndex\\\"     : int,          // Subcatch[i].snowpack->snowmeltIndex\\n                \\\"fArea\\\"             : [ \\n                                        float, x3   // Subcatch[i].snowpack->fArea[j]\\n                ],\\n                \\\"wsnow\\\"             : [ \\n                                        float, x3   // Subcatch[i].snowpack->wsnow[j]\\n                ],\\n                \\\"fw\\\"                : [ \\n                                        float, x3   // Subcatch[i].snowpack->fw[j]\\n                ],\\n                \\\"coldc\\\"             : [ \\n                                        float, x3   // Subcatch[i].snowpack->coldc[j]\\n                ],\\n                \\\"ati\\\"               : [ \\n                                        float, x3   // Subcatch[i].snowpack->ati[j]\\n                ],\\n                \\\"sba\\\"               : [ \\n                                        float, x3   // Subcatch[i].snowpack->sba[j]\\n                ],\\n                \\\"awe\\\"               : [ \\n                                        float, x3   // Subcatch[i].snowpack->awe[j]\\n                ],\\n                \\\"sbws\\\"              : [ \\n                                        float, x3   // Subcatch[i].snowpack->sbws[j]\\n                ],\\n                \\\"imelt\\\"             : [ \\n                                        float, x3   // Subcatch[i].snowpack->imelt[j]\\n                ]\\n            },\\n            \\\"nPervPattern\\\"          : int,          // Subcatch[i].nPervPattern\\n            \\\"dStorePattern\\\"         : int,          // Subcatch[i].dStorePattern\\n            \\\"infilPattern\\\"          : int           // Subcatch[i].infilPattern\\n\\n        }, ... xNobjects[SUBCATCH]\\n    ],\\n    \\\"Node\\\": [\\n        {\\n            \\\"ID\\\"                    : string,       // Node[i].ID\\n            \\\"type\\\"                  : int,          // Node[i].type\\n            \\\"subIndex\\\"              : int,          // Node[i].subIndex\\n            \\\"rptFlag\\\"               : int,          // Node[i].rptFlag\\n            \\\"invertElev\\\"            : float,        // Node[i].invertElev\\n            \\\"initDepth\\\"             : float,        // Node[i].initDepth\\n            \\\"fullDepth\\\"             : float,        // Node[i].fullDepth\\n            \\\"surDepth\\\"              : float,        // Node[i].surDepth\\n            \\\"pondedArea\\\"            : float,        // Node[i].pondedArea\\n            \\\"extInflow\\\"             : [ \\n                {\\n                    \\\"param\\\"         : int,          // Node[i].extInflow->param\\n                    \\\"type\\\"          : int,          // Node[i].extInflow->type\\n                    \\\"tSeries\\\"       : int           // Node[i].extInflow->tSeries\\n                    \\\"basePat\\\"       : int           // Node[i].extInflow->basePat\\n                    \\\"cFactor\\\"       : float,        // Node[i].extInflow->cFactor\\n                    \\\"baseline\\\"      : float,        // Node[i].extInflow->baseline\\n                    \\\"sFactor\\\"       : float,        // Node[i].extInflow->sFactor\\n                    \\\"extIfaceInflow\\\": float         // Node[i].extInflow->extIfaceInflow\\n                }, ...\\n            ],\\n            \\\"dwfInflow\\\"             : [ \\n                {\\n                    \\\"param\\\"         : int,          // Node[i].dwfInflow->param\\n                    \\\"avgValue\\\"      : float,        // Node[i].dwfInflow->avgValue\\n                    \\\"patterns\\\"      : [ \\n                                        int, x4     // Node[i].dwfInflow->patterns[j]\\n                    ]\\n                }, ...\\n            ],\\n            \\\"rdiiInflow\\\"            : null | {\\n                \\\"unitHyd\\\"           : int,          // Node[i].dwfInflow->param\\n                \\\"area\\\"              : float         // Node[i].dwfInflow->avgValue\\n            },\\n            \\\"treatment\\\"             : null | {\\n                \\\"treatType\\\"         : int,          // Node[i].treatment->treatType\\n                \\\"equation\\\"          : [\\n                    {\\n                        \\\"opcode\\\"    : int,          // Node[i].treatment->equation->opcode\\n                        \\\"ivar\\\"      : int,          // Node[i].treatment->equation->ivar\\n                        \\\"fvalue\\\"    : float         // Node[i].treatment->equation->fvalue\\n                    }, ...\\n                ]\\n            },\\n        }, ...  xNobjects[NODE]\\n    ],\\n    \\\"Infil\\\": [\\n        {\\n            \\\"horton\\\"                : null | {\\n                \\\"f0\\\"                : float,        // horton_getInput(i, p)=>p[0]\\n                \\\"fmin\\\"              : float,        // horton_getInput(i, p)=>p[1]\\n                \\\"Fmax\\\"              : float,        // horton_getInput(i, p)=>p[2]\\n                \\\"decay\\\"             : float,        // horton_getInput(i, p)=>p[3]\\n                \\\"regen\\\"             : float         // horton_getInput(i, p)=>p[4]\\n            },\\n            \\\"grnAmpt\\\"               : null | {\\n                \\\"S\\\"                 : float,        // grnampt_getInput(i, p)=>p[0]\\n                \\\"Ks\\\"                : float,        // grnampt_getInput(i, p)=>p[1]\\n                \\\"IMDmax\\\"            : float         // grnampt_getInput(i, p)=>p[2]\\n            },\\n            \\\"curveNum\\\"              : null | {\\n                \\\"Smax\\\"              : float,        // grnampt_getInput(i, p)=>p[0]\\n                \\\"regen\\\"             : float,        // grnampt_getInput(i, p)=>p[1]\\n                \\\"Tmax\\\"              : float         // grnampt_getInput(i, p)=>p[2]\\n            }\\n        }, ... xNobjects[SUBCATCH]\\n    ],\\n    \\\"Aquifer\\\": [\\n        {\\n            \\\"ID\\\"                    : string,       // Aquifer[i].ID\\n            \\\"porosity\\\"              : float,        // Aquifer[i].porosity\\n            \\\"wiltingPoint\\\"          : float,        // Aquifer[i].wiltingPoint\\n            \\\"fieldCapacity\\\"         : float,        // Aquifer[i].fieldCapacity\\n            \\\"conductivity\\\"          : float,        // Aquifer[i].conductivity\\n            \\\"conductSlope\\\"          : float,        // Aquifer[i].conductSlope\\n            \\\"tensionSlope\\\"          : float,        // Aquifer[i].tensionSlope\\n            \\\"upperEvapFrac\\\"         : float,        // Aquifer[i].upperEvapFrac\\n            \\\"lowerEvapDepth\\\"        : float,        // Aquifer[i].lowerEvapDepth\\n            \\\"lowerLossCoeff\\\"        : float,        // Aquifer[i].lowerLossCoeff\\n            \\\"bottomElev\\\"            : float,        // Aquifer[i].bottomElev\\n            \\\"waterTableElev\\\"        : float,        // Aquifer[i].waterTableElev\\n            \\\"upperMoisture\\\"         : float,        // Aquifer[i].upperMoisture\\n            \\\"upperEvapPat\\\"          : float         // Aquifer[i].upperEvapPat\\n        }, ... xNobjects[AQUIFER]\\n    ],\\n    \\\"Snowmelt\\\": [\\n        {\\n            \\\"ID\\\"                    : string,       // Snowmelt[i].ID\\n            \\\"snn\\\"                   : float,        // Snowmelt[i].snn\\n            \\\"si\\\"                    : [ \\n                                    float, x3       // Snowmelt[i].si[j]\\n            ],  \\n            \\\"dhmin\\\"                 : [ \\n                                    float, x3       // Snowmelt[i].dhmin[j]\\n            ], \\n            \\\"dhmax\\\"                 : [ \\n                                    float, x3       // Snowmelt[i].dhmax[j]\\n            ], \\n            \\\"tbase\\\"                 : [ \\n                                    float, x3       // Snowmelt[i].tbase[j]\\n            ], \\n            \\\"fwfrac\\\"                : [ \\n                                    float, x3       // Snowmelt[i].fwfrac[j]\\n            ], \\n            \\\"wsnow\\\"                 : [ \\n                                    float, x3       // Snowmelt[i].wsnow[j]\\n            ],  \\n            \\\"fwnow\\\"                 : [ \\n                                    float, x3       // Snowmelt[i].fwnow[j]\\n            ], \\n            \\\"weplow\\\"                : float,        // Snowmelt[i].weplow\\n            \\\"sfrac\\\"                 : [ \\n                                    float, x5       // Snowmelt[i].sfrac[j]\\n            ], \\n            \\\"toSubcatch\\\"            : int           // Snowmelt[i].toSubcatch\\n        }, ... xNobjects[SNOWMELT]\\n    ],\\n    \\\"Outfall\\\": [\\n        {\\n            \\\"type\\\"                  : int,          // Outfall[i].type\\n            \\\"hasFlapGate\\\"           : int,          // Outfall[i].hasFlapGate\\n            \\\"fixedStage\\\"            : float,        // Outfall[i].fixedStage\\n            \\\"tideCurve\\\"             : int,          // Outfall[i].tideCurve\\n            \\\"stageSeries\\\"           : int,          // Outfall[i].stageSeries\\n            \\\"routeTo\\\"               : int,          // Outfall[i].routeTo\\n            \\\"vRouted\\\"               : float,        // Outfall[i].vRouted\\n            \\\"wRouted\\\"               : [ \\n                                    float, xNobjects[POLLUT] // Outfall[i].wRouted[j]\\n            ] \\n        }, ... xNnodes[OUTFALL]\\n    ],\\n    \\\"Storage\\\": [\\n        {\\n            \\\"fEvap\\\"                 : float,        // Storage[i].fEvap\\n            \\\"aConst\\\"                : float,        // Storage[i].aConst\\n            \\\"aCoeff\\\"                : float,        // Storage[i].aCoeff\\n            \\\"aExpon\\\"                : float,        // Storage[i].aExpon\\n            \\\"aCurve\\\"                : int,          // Storage[i].aCurve\\n            \\\"exfil\\\"                 : null | {\\n                \\\"btmExfil\\\"          : null | {\\n                    \\\"S\\\"             : float,        // Storage[i].exfil->btmExfil->S\\n                    \\\"Ks\\\"            : float,        // Storage[i].exfil->btmExfil->Ks\\n                    \\\"IMDmax\\\"        : float         // Storage[i].exfil->btmExfil->IMDmax\\n                },    \\n                \\\"bankExfil\\\"          : null | {\\n                    \\\"S\\\"             : float,        // Storage[i].exfil->bankExfil->S\\n                    \\\"Ks\\\"            : float,        // Storage[i].exfil->bankExfil->Ks\\n                    \\\"IMDmax\\\"        : float         // Storage[i].exfil->bankExfil->IMDmax\\n                },\\n                \\\"btmArea\\\"           : float,        // Storage[i].exfil->btmArea\\n                \\\"bankMinDepth\\\"      : float,        // Storage[i].exfil->bankMinDepth\\n                \\\"bankMaxDepth\\\"      : float,        // Storage[i].exfil->bankMaxDepth\\n                \\\"bankMaxArea\\\"       : float         // Storage[i].exfil->bankMaxArea\\n            }\\n        }, ... xNnodes[STORAGE]\\n    ],\\n    \\\"Divider\\\": [\\n        {\\n            \\\"link\\\"                  : int,          // Divider[i].link\\n            \\\"type\\\"                  : int,          // Divider[i].type\\n            \\\"qMin\\\"                  : float,        // Divider[i].qMin\\n            \\\"qMax\\\"                  : float,        // Divider[i].qMax\\n            \\\"dhMax\\\"                 : float,        // Divider[i].dhMax\\n            \\\"cWeir\\\"                 : float,        // Divider[i].cWeir\\n            \\\"flowCurve\\\"             : int           // Divider[i].flowCurve\\n        }, ... xNnodes[DIVIDER]\\n    ],\\n    \\\"Conduit\\\": [\\n        {\\n            \\\"length\\\"                : float,        // Conduit[i].length\\n            \\\"roughness\\\"             : float,        // Conduit[i].roughness\\n            \\\"barrels\\\"               : int           // Conduit[i].barrels\\n        }, ... xNlinks[CONDUIT]\\n    ],\\n    \\\"Pump\\\": [\\n        {\\n            \\\"type\\\"                  : int,          // Pump[i].type\\n            \\\"pumpCurve\\\"             : int,          // Pump[i].pumpCurve\\n            \\\"initSetting\\\"           : float,        // Pump[i].initSetting\\n            \\\"yOn\\\"                   : float,        // Pump[i].yOn\\n            \\\"yOff\\\"                  : float,        // Pump[i].yOff\\n            \\\"xMin\\\"                  : float,        // Pump[i].xMin\\n            \\\"xMax\\\"                  : float         // Pump[i].xMax\\n        }, ... xNlinks[PUMP]\\n    ],\\n    \\\"Orifice\\\": [\\n        {\\n            \\\"type\\\"                  : int,          // Orifice[i].type\\n            \\\"shape\\\"                 : int,          // Orifice[i].shape\\n            \\\"cDisch\\\"                : float,        // Orifice[i].cDisch\\n            \\\"orate\\\"                 : float         // Orifice[i].orate\\n        }, ... xNlinks[ORIFICE]\\n    ],\\n    \\\"Weir\\\": [\\n        {\\n            \\\"type\\\"                  : int,          // Weir[i].type\\n            \\\"cDisch1\\\"               : float,        // Weir[i].cDisch1\\n            \\\"cDisch2\\\"               : float,        // Weir[i].cDisch2\\n            \\\"endCon\\\"                : float,        // Weir[i].endCon\\n            \\\"canSurcharge\\\"          : int,          // Weir[i].canSurcharge\\n            \\\"roadWidth\\\"             : float,        // Weir[i].roadWidth\\n            \\\"roadSurface\\\"           : int,          // Weir[i].roadSurface\\n            \\\"cdCurve\\\"               : int           // Weir[i].cdCurve\\n        }, ... xNlinks[WEIR]\\n    ],\\n    \\\"Outlet\\\": [\\n        {\\n            \\\"qCoeff\\\"                : float,        // Outlet[i].qCoeff\\n            \\\"qExpon\\\"                : float,        // Outlet[i].qExpon\\n            \\\"qCurve\\\"                : int,          // Outlet[i].qCurve\\n            \\\"curveType\\\"             : int,          // Outlet[i].curveType\\n        }, ... xNlinks[OUTLET]\\n    ],\\n    \\\"Link\\\": [\\n        {\\n            \\\"ID\\\"                    : string,       // Link[i].ID\\n            \\\"type\\\"                  : int,          // Link[i].type\\n            \\\"subIndex\\\"              : int,          // Link[i].subIndex\\n            \\\"rptFlag\\\"               : int,          // Link[i].rptFlag\\n            \\\"node1\\\"                 : int,          // Link[i].node1\\n            \\\"node2\\\"                 : int,          // Link[i].node2\\n            \\\"offset1\\\"               : float,        // Link[i].offset1\\n            \\\"offset2\\\"               : float,        // Link[i].offset2\\n            \\\"xsect\\\"                 : {\\n                \\\"type\\\"              : int,          // Link[i].xsect.type\\n                \\\"culvertCode\\\"       : int,          // Link[i].xsect.culvertCode\\n                \\\"transect\\\"          : int,          // Link[i].xsect.transect\\n                \\\"yFull\\\"             : float,        // Link[i].xsect.yFull\\n                \\\"wMax\\\"              : float,        // Link[i].xsect.wMax\\n                \\\"ywMax\\\"             : float,        // Link[i].xsect.ywMax\\n                \\\"aFull\\\"             : float,        // Link[i].xsect.aFull\\n                \\\"rFull\\\"             : float,        // Link[i].xsect.rFull\\n                \\\"sFull\\\"             : float,        // Link[i].xsect.sFull\\n                \\\"sMax\\\"              : float,        // Link[i].xsect.sMax\\n            },\\n            \\\"q0\\\"                    : float,        // Link[i].q0\\n            \\\"qLimit\\\"                : float,        // Link[i].qLimit\\n            \\\"cLossInlet\\\"            : float,        // Link[i].cLossInlet\\n            \\\"cLossOutlet\\\"           : float,        // Link[i].cLossOutlet\\n            \\\"cLossAvg\\\"              : float,        // Link[i].cLossAvg\\n            \\\"seepRate\\\"              : float,        // Link[i].seepRate\\n            \\\"hasFlapGate\\\"           : int           // Link[i].hasFlapGate\\n        }, ... xNobjects[LINK]\\n    ],\\n    \\\"Transect\\\": [\\n        {\\n            \\\"ID\\\"                    : string,       // Transect[i].ID\\n            \\\"yFull\\\"                 : float,        // Transect[i].yFull\\n            \\\"aFull\\\"                 : float,        // Transect[i].aFull\\n            \\\"rFull\\\"                 : float,        // Transect[i].rFull\\n            \\\"wMax\\\"                  : float,        // Transect[i].wMax\\n            \\\"ywMax\\\"                 : float,        // Transect[i].ywMax\\n            \\\"sMax\\\"                  : float,        // Transect[i].sMax\\n            \\\"aMax\\\"                  : float,        // Transect[i].aMax\\n            \\\"lengthFactor\\\"          : float         // Transect[i].lengthFactor\\n        }, ... xNobjects[TRANSECT]\\n    ],\\n    \\\"Shape\\\": [\\n        {\\n            \\\"curve\\\"                 : int,       // Shape[i].curve\\n            \\\"nTbl\\\"                  : int,       // Shape[i].nTbl\\n            \\\"aFull\\\"                 : float,     // Shape[i].aFull\\n            \\\"rFull\\\"                 : float,     // Shape[i].rFull\\n            \\\"wMax\\\"                  : float,     // Shape[i].wMax\\n            \\\"sMax\\\"                  : float,     // Shape[i].sMax\\n            \\\"aMax\\\"                  : float,     // Shape[i].aMax\\n            \\\"areaTbl\\\"               : [\\n                                        float, xN_SHAPE_TBL // Shape[i].areaTbl[j]\\n            ],       \\n            \\\"hradTbl\\\"               : [\\n                                        float, xN_SHAPE_TBL // Shape[i].hradTbl[j]\\n            ],\\n            \\\"widthTbl\\\"              : [\\n                                        float, xN_SHAPE_TBL // Shape[i].widthTbl[j]\\n            ]\\n        }, ... xNobjects[SHAPE]\\n    ],\\n    \\\"Pollut\\\": [\\n        {\\n            \\\"ID\\\"                    : string,   // Pollut[i].ID\\n            \\\"units\\\"                 : int,      // Pollut[i].units\\n            \\\"mcf\\\"                   : float,    // Pollut[i].mcf\\n            \\\"dwfConcen\\\"             : float,    // Pollut[i].dwfConcen\\n            \\\"pptConcen\\\"             : float,    // Pollut[i].pptConcen\\n            \\\"gwConcen\\\"              : float,    // Pollut[i].gwConcen\\n            \\\"rdiiConcen\\\"            : float,    // Pollut[i].rdiiConcen\\n            \\\"initConcen\\\"            : float,    // Pollut[i].initConcen\\n            \\\"kDecay\\\"                : float,    // Pollut[i].kDecay\\n            \\\"coPollut\\\"              : int,      // Pollut[i].coPollut\\n            \\\"coFraction\\\"            : float,    // Pollut[i].coFraction\\n            \\\"snowOnly\\\"              : int       // Pollut[i].snowOnly\\n        }, ... xNobjects[POLLUT]\\n    ],\\n    \\\"Landuse\\\": [\\n        {\\n            \\\"ID\\\"                    : string,   // Landuse[i].ID\\n            \\\"sweepInterval\\\"         : float,    // Landuse[i].sweepInterval\\n            \\\"sweepRemoval\\\"          : float,    // Landuse[i].sweepRemoval\\n            \\\"sweepDays0\\\"            : float,    // Landuse[i].sweepDays0\\n            \\\"buildupFunc\\\"           : [\\n                {\\n                    \\\"normalizer\\\"    : int,      // Landuse[i].buildupFunc[j].normalizer\\n                    \\\"sweepInterval\\\" : int,      // Landuse[i].buildupFunc[j].sweepInterval\\n                    \\\"coeff\\\"         : [\\n                                        float, x3 //  Landuse[i].buildupFunc[j].coeff[k]\\n                    ],\\n                    \\\"maxDays\\\"       : float     // Landuse[i].buildupFunc[j].maxDays\\n                }, ... xNobjects[POLLUT]\\n            ],\\n            \\\"washoffFunc\\\"           : [\\n                {\\n                    \\\"funcType\\\"      : int,      // Landuse[i].washoffFunc[j].funcType\\n                    \\\"coeff\\\"         : float,    // Landuse[i].washoffFunc[j].coeff\\n                    \\\"expon\\\"         : float,    // Landuse[i].washoffFunc[j].expon\\n                    \\\"sweepEffic\\\"    : float,    // Landuse[i].washoffFunc[j].sweepEffic\\n                    \\\"bmpEffic\\\"      : float     // Landuse[i].washoffFunc[j].bmpEffic\\n                }, ... xNobjects[POLLUT]\\n            ],\\n        }, ... xNobjects[LANDUSE]\\n    ],\\n    \\\"UnitHyd\\\": [\\n        {\\n            \\\"ID\\\"                    : string,   // UnitHyd[i].ID\\n            \\\"rainGage\\\"              : int,      // UnitHyd[i].rainGage\\n            \\\"iaMax\\\"                 : [ \\n                                        [\\n                                        float, x3  // UnitHyd[i].iaMax[j][k]\\n                                    ], x12\\n            ],\\n            \\\"iaRecov\\\"               : [ \\n                                        [\\n                                        float, x3  // UnitHyd[i].iaRecov[j][k]\\n                                    ], x12\\n            ],\\n            \\\"iaInit\\\"                : [ \\n                                        [\\n                                        float, x3  // UnitHyd[i].iaInit[j][k]\\n                                    ], x12\\n            ],\\n            \\\"r\\\"                     : [ \\n                                        [\\n                                        float, x3  // UnitHyd[i].r[j][k]\\n                                    ], x12\\n            ],\\n            \\\"tBase\\\"                 : [ \\n                                        [\\n                                        int, x3  // UnitHyd[i].tBase[j][k]\\n                                    ], x12\\n            ],\\n            \\\"tPeak\\\"                 : [ \\n                                        [\\n                                        int, x3  // UnitHyd[i].tPeak[j][k]\\n                                    ], x12\\n            ]\\n        }, ... xNobjects[UNITHYD]\\n    ],\\n    \\\"Curve\\\": [\\n        {\\n            \\\"ID\\\"                    : string,   // Curve[i].ID\\n            \\\"curveType\\\"             : int,      // Curve[i].curveType\\n            \\\"refersTo\\\"              : int,      // Curve[i].refersTo\\n            \\\"dxMin\\\"                 : float,    // Curve[i].dxMin\\n            \\\"lastDate\\\"              : float,    // Curve[i].lastDate\\n            \\\"x1\\\"                    : float,    // Curve[i].x1\\n            \\\"x2\\\"                    : float,    // Curve[i].x2\\n            \\\"y1\\\"                    : float,    // Curve[i].y1\\n            \\\"y2\\\"                    : float,    // Curve[i].y2\\n            \\\"file\\\"                  : {\\n                \\\"name\\\"              : string,   // Curve[i].file.name\\n                \\\"mode\\\"              : int       // Curve[i].file.mode\\n            },\\n            \\\"Table\\\"                 : [\\n                {\\n                    \\\"x\\\",            : float     // Curve[i].Table->x\\n                    \\\"y\\\"             : float     // Curve[i].Table->y\\n                }, ... \\n            ]\\n        }, ... xNobjects[CURVE]\\n    ],\\n    \\\"Control\\\": [\\n        {\\n            \\\"ID\\\"                    : string,   // Rules[i].ID\\n            \\\"priority\\\"              : float,    // Rules[i].priority\\n            \\\"Premises\\\"              : [\\n                {\\n                    \\\"type\\\"          : int,      // Rules[i].Premise->type\\n                    \\\"lhsVar\\\"        : {\\n                        \\\"node\\\"      : int,      // Rules[i].Premise->lhsVar.node\\n                        \\\"link\\\"      : int,      // Rules[i].Premise->lhsVar.link\\n                        \\\"attribute\\\" : int       // Rules[i].Premise->lhsVar.attribute\\n                    },\\n                    \\\"rhsVar\\\"        : {\\n                        \\\"node\\\"      : int,      // Rules[i].Premise->lhsVar.node\\n                        \\\"link\\\"      : int,      // Rules[i].Premise->lhsVar.link\\n                        \\\"attribute\\\" : int       // Rules[i].Premise->lhsVar.attribute\\n                    },\\n                    \\\"relation\\\"      : int,      // Rules[i].Premise->relation\\n                    \\\"value\\\"         : float     // Rules[i].Premise->value\\n                }, ... \\n            ],\\n            \\\"thenActions\\\"           : [\\n                {\\n                    \\\"rule\\\"          : int,      // Rules[i].thenActions->rule\\n                    \\\"link\\\"          : int,      // Rules[i].thenActions->link\\n                    \\\"attribute\\\"     : int,      // Rules[i].thenActions->attribute\\n                    \\\"curve\\\"         : int,      // Rules[i].thenActions->curve\\n                    \\\"tseries\\\"       : int,      // Rules[i].thenActions->tseries\\n                    \\\"value\\\"         : float,    // Rules[i].thenActions->value\\n                    \\\"kp\\\"            : float,    // Rules[i].thenActions->kp\\n                    \\\"ki\\\"            : float,    // Rules[i].thenActions->ki\\n                    \\\"kd\\\"            : float,    // Rules[i].thenActions->kd\\n                    \\\"e1\\\"            : float,    // Rules[i].thenActions->e1\\n                    \\\"e2\\\"            : float     // Rules[i].thenActions->e2\\n                }, ... \\n            ],\\n            \\\"thenActions\\\"           : [\\n                {\\n                    \\\"rule\\\"          : int,      // Rules[i].elseActions->rule\\n                    \\\"link\\\"          : int,      // Rules[i].elseActions->link\\n                    \\\"attribute\\\"     : int,      // Rules[i].elseActions->attribute\\n                    \\\"curve\\\"         : int,      // Rules[i].elseActions->curve\\n                    \\\"tseries\\\"       : int,      // Rules[i].elseActions->tseries\\n                    \\\"value\\\"         : float,    // Rules[i].elseActions->value\\n                    \\\"kp\\\"            : float,    // Rules[i].elseActions->kp\\n                    \\\"ki\\\"            : float,    // Rules[i].elseActions->ki\\n                    \\\"kd\\\"            : float,    // Rules[i].elseActions->kd\\n                    \\\"e1\\\"            : float,    // Rules[i].elseActions->e1\\n                    \\\"e2\\\"            : float     // Rules[i].elseActions->e2\\n                }, ... \\n            ]\\n        }, ... xNobjects[CONTROL]\\n    ],\\n    \\\"RptFlags\\\": {\\n        \\\"report\\\"                    : int,      // RptFlags.report\\n        \\\"input\\\"                     : int,      // RptFlags.input\\n        \\\"subcatchments\\\"             : int,      // RptFlags.subcatchments\\n        \\\"nodes\\\"                     : int,      // RptFlags.nodes\\n        \\\"links\\\"                     : int,      // RptFlags.links\\n        \\\"continuity\\\"                : int,      // RptFlags.continuity\\n        \\\"flowStats\\\"                 : int,      // RptFlags.flowStats\\n        \\\"nodeStats\\\"                 : int,      // RptFlags.nodeStats\\n        \\\"controls\\\"                  : int,      // RptFlags.controls\\n        \\\"averages\\\"                  : int,      // RptFlags.averages\\n        \\\"linesPerPage\\\"              : int       // RptFlags.linesPerPage\\n    },\\n    \\\"LidProcs\\\": [\\n        {\\n            \\\"ID\\\"                        : string,   // LidProcs[i].ID\\n            \\\"lidType\\\"                   : int,      // LidProcs[i].lidType\\n            \\\"surface\\\"                   : {\\n                \\\"thickness\\\"             : float,    // LidProcs[i].surface.thickness\\n                \\\"voidFrac\\\"              : float,    // LidProcs[i].surface.voidFrac\\n                \\\"roughness\\\"             : float,    // LidProcs[i].surface.roughness\\n                \\\"surfSlope\\\"             : float,    // LidProcs[i].surface.surfSlope\\n                \\\"sideSlope\\\"             : float,    // LidProcs[i].surface.sideSlope\\n                \\\"alpha\\\"                 : float,    // LidProcs[i].surface.alpha\\n                \\\"canOverflow\\\"           : float     // LidProcs[i].surface.canOverflow\\n            },\\n            \\\"pavement\\\"                  : {\\n                \\\"thickness\\\"             : float,    // LidProcs[i].pavement.thickness\\n                \\\"voidFrac\\\"              : float,    // LidProcs[i].pavement.voidFrac\\n                \\\"impervFrac\\\"            : float,    // LidProcs[i].pavement.impervFrac\\n                \\\"kSat\\\"                  : float,    // LidProcs[i].pavement.kSat\\n                \\\"clogFactor\\\"            : float,    // LidProcs[i].pavement.clogFactor\\n                \\\"regenDays\\\"             : float,    // LidProcs[i].pavement.regenDays\\n                \\\"regenDegree\\\"           : float     // LidProcs[i].pavement.regenDegree\\n            },\\n            \\\"soil\\\"                      : {\\n                \\\"thickness\\\"             : float,    // LidProcs[i].soil.thickness\\n                \\\"porosity\\\"              : float,    // LidProcs[i].soil.porosity\\n                \\\"fieldCap\\\"              : float,    // LidProcs[i].soil.fieldCap\\n                \\\"wiltPoint\\\"             : float,    // LidProcs[i].soil.wiltPoint\\n                \\\"suction\\\"               : float,    // LidProcs[i].soil.suction\\n                \\\"kSat\\\"                  : float,    // LidProcs[i].soil.kSat\\n                \\\"kSlope\\\"                : float     // LidProcs[i].soil.kSlope\\n            },\\n            \\\"storage\\\"                   : {\\n                \\\"thickness\\\"             : float,    // LidProcs[i].storage.thickness\\n                \\\"voidFrac\\\"              : float,    // LidProcs[i].storage.voidFrac\\n                \\\"kSat\\\"                  : float,    // LidProcs[i].storage.kSat\\n                \\\"clogFactor\\\"            : float     // LidProcs[i].storage.clogFactor\\n            },\\n            \\\"drain\\\"                     : {\\n                \\\"coeff\\\"                 : float,    // LidProcs[i].drain.coeff\\n                \\\"expon\\\"                 : float,    // LidProcs[i].drain.expon\\n                \\\"offset\\\"                : float,    // LidProcs[i].drain.offset\\n                \\\"delay\\\"                 : float,    // LidProcs[i].drain.delay\\n                \\\"hOpen\\\"                 : float,    // LidProcs[i].drain.hOpen\\n                \\\"hClose\\\"                : float,    // LidProcs[i].drain.hClose\\n                \\\"qCurve\\\"                : int       // LidProcs[i].drain.qCurve\\n            },\\n            \\\"drainMat\\\"                  : {\\n                \\\"thickness\\\"             : float,    // LidProcs[i].drainMat.thickness\\n                \\\"voidFrac\\\"              : float,    // LidProcs[i].drainMat.voidFrac\\n                \\\"roughness\\\"             : float,    // LidProcs[i].drainMat.roughness\\n                \\\"alpha\\\"                 : float,    // LidProcs[i].drainMat.alpha\\n            },\\n            \\\"drainRmvl\\\"                 : [\\n                                            float, xNobjects[POLLUT] //  LidProcs[i].drainRmvl[j]\\n            ]\\n        }, ... xLidCount\\n    ]\\n}\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"swmmJSON\\\",\\\"metaTitle\\\":\\\"swmm files in JSON format\\\",\\\"metaDescription\\\":\\\"Specifications of the JSON formats for swmm files.\\\"}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"__typename":"File","relativePath":"swmmJSON.md"},"frontmatter":{"metaTitle":"swmm files in JSON format","metaDescription":"Specifications of the JSON formats for swmm files."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"swmm-JS"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/SJX","title":"SJX"}}},{"node":{"fields":{"slug":"/swmmJSON","title":"swmmJSON"}}},{"node":{"fields":{"slug":"/SJX/01Title","title":"Title"}}},{"node":{"fields":{"slug":"/SJX/02OPTIONS/FLOW_UNITS","title":"FLOW_UNITS"}}},{"node":{"fields":{"slug":"/SJX/02OPTIONS","title":"OPTIONS"}}}]}},"pageContext":{"id":"d807c3a9-a0b2-5762-a4e1-d739f98d5b74"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}